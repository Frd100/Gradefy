import csv
import collections
import sys

# Chemin correct du fichier CSV avec caract√®res sp√©ciaux
file_path = '/Users/farid/Gradefy/√âtude sur les habitudes de r√©vision des √©tudiants (r√©ponses) - R√©ponses au formulaire 1 (1).csv'

# Index des colonnes (commence √† 0)
SATISFACTION_COL = 4
PHONE_COL = 8
FEATURES_COL = 9
ADOPTION_COL = 10

try:
    with open(file_path, mode='r', encoding='utf-8') as infile:
        reader = csv.reader(infile)
        header = next(reader)
        data = list(reader)
except FileNotFoundError:
    print(f"Erreur : Le fichier '{file_path}' est introuvable.", file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f"Une erreur est survenue lors de la lecture du fichier : {e}", file=sys.stderr)
    sys.exit(1)


total_responses = len(data)

# 1. Analyse de la satisfaction
satisfaction_counts = collections.Counter(row[SATISFACTION_COL] for row in data)
peu_satisfaits = satisfaction_counts.get('Peu satisfait(e)', 0)
moyennement_satisfaits = satisfaction_counts.get('Moyennement satisfait(e)', 0)
insatisfaction_rate = (peu_satisfaits + moyennement_satisfaits) / total_responses * 100

# 2. Analyse du t√©l√©phone utilis√©
phone_counts = collections.Counter(row[PHONE_COL] for row in data)
iphone_users = phone_counts.get('iPhone', 0)
iphone_rate = iphone_users / total_responses * 100

# 3. Analyse de l'adoption
adoption_counts = collections.Counter(row[ADOPTION_COL] for row in data)
immediate_adoption = adoption_counts.get('Imm√©diatement', 0)
immediate_adoption_rate = immediate_adoption / total_responses * 100

# 4. Analyse des fonctionnalit√©s demand√©es
feature_keywords = {
    'ia': 'G√©n√©ration automatique de cartes (IA)',
    'quiz': 'Quiz interactifs',
    'rappels': 'Rappels de r√©vision',
    'suivi': 'Suivi de progression',
    'association': 'Exercices d‚Äôassociation',
    'srs': 'R√©p√©tition espac√©e (SRS)',
    'offline': 'Confidentialit√© : donn√©es stock√©es localement, utilisation hors ligne',
    'images_audio': 'Prise en charge d‚Äôimages et d‚Äôaudio'
}

feature_counter = collections.defaultdict(int)
for row in data:
    response_text = row[FEATURES_COL]
    for key, keyword in feature_keywords.items():
        if keyword in response_text:
            feature_counter[keyword] += 1

top_5_features = sorted(feature_counter.items(), key=lambda item: item[1], reverse=True)[:5]


# Affichage des r√©sultats
print("üìä ANALYSE DE L'√âTUDE DE MARCH√â GRADEFY üìä")
print("==========================================")
print(f"Nombre total de r√©pondants : {total_responses}")
print("\n--- üéØ Probl√®me et Opportunit√© ---")
print(f"{insatisfaction_rate:.0f}% des √©tudiants sont peu ou moyennement satisfaits de leurs outils actuels.")
print(f"‚Ü≥ ({peu_satisfaits + moyennement_satisfaits} sur {total_responses}) Il existe un besoin clair pour une meilleure solution.")

print("\n--- üì± March√© Cible ---")
print(f"{iphone_rate:.0f}% des √©tudiants interrog√©s utilisent un iPhone.")
print(f"‚Ü≥ ({iphone_users} sur {total_responses}) Valide une strat√©gie de lancement prioritaire sur iOS.")

print("\n--- ‚ö°Ô∏è Potentiel d'Adoption ---")
print(f"{immediate_adoption_rate:.0f}% des √©tudiants adopteraient la solution imm√©diatement.")
print(f"‚Ü≥ ({immediate_adoption} sur {total_responses}) D√©montre une forte traction et un besoin urgent.")

print("\n--- ‚ú® Fonctionnalit√©s les Plus Demand√©es ---")
for i, (feature, count) in enumerate(top_5_features):
    percentage = (count / total_responses) * 100
    print(f"{i+1}. {feature} : {count} mentions ({percentage:.0f}%)")

print("\n==========================================")
print("Conclusion : Les donn√©es valident fortement le besoin, le march√© cible (iOS) et les fonctionnalit√©s cl√©s de Gradefy.")
